from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import logging

BOT_TOKEN = 'YOUR_BOT_TOKEN'  # Replace with your actual token
ADMIN_IDS = [123456789]       # Replace with your actual Telegram user ID
MAX_STORED_MESSAGES = 10      # Limit stored messages per user

logging.basicConfig(level=logging.INFO)

# Initialize bot_data (persists during runtime)
async def init_bot_data(context: ContextTypes.DEFAULT_TYPE):
    if not hasattr(context.bot_data, 'rules_text'):
        context.bot_data.rules_text = "Welcome! Group Rules: No spamming. No NSFW. Be respectful."
    if not hasattr(context.bot_data, 'ban_words'):
        context.bot_data.ban_words = ["porn", "sex", "nude"]

# Admin check
async def is_admin(update: Update):
    return update.effective_user.id in ADMIN_IDS

# Commands
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(update):
        await update.message.reply_text("Bot is active. Admin mode enabled.")

async def set_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(update):
        context.bot_data.rules_text = ' '.join(context.args)
        await update.message.reply_text("Rules updated!")

async def add_ban_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(update):
        word = ' '.join(context.args).lower()
        if word not in context.bot_data.ban_words:
            context.bot_data.ban_words.append(word)
            await update.message.reply_text(f"Added to ban list: {word}")
        else:
            await update.message.reply_text(f"'{word}' is already banned.")

async def list_ban_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(update):
        await update.message.reply_text(f"Current banned words: {', '.join(context.bot_data.ban_words)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(update):
        await update.message.reply_text("""
Admin Commands:
/setrules <text> - Set group rules
/addbanword <word> - Add a word to banned list
/listbanwords - Show banned words
/help - Show this help
""")

# Handle normal messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()
    group_id = update.message.chat_id

    # Initialize user message tracking
    if 'user_messages' not in context.chat_data:
        context.chat_data['user_messages'] = {}
    if user_id not in context.chat_data['user_messages']:
        context.chat_data['user_messages'][user_id] = []
    
    # Store message (limit to last N messages)
    context.chat_data['user_messages'][user_id].append(update.message.message_id)
    if len(context.chat_data['user_messages'][user_id]) > MAX_STORED_MESSAGES:
        context.chat_data['user_messages'][user_id].pop(0)

    # Ban check
    for word in context.bot_data.ban_words:
        if word in text:
            try:
                # Check if bot has admin rights
                bot_member = await context.bot.get_chat_member(group_id, context.bot.id)
                if bot_member.status != "administrator":
                    await update.message.reply_text("âš  I need admin rights to ban users!")
                    return

                await update.message.delete()
                await context.bot.ban_chat_member(chat_id=group_id, user_id=user_id)

                # Delete past messages
                for msg_id in context.chat_data['user_messages'][user_id]:
                    try:
                        await context.bot.delete_message(chat_id=group_id, message_id=msg_id)
                    except:
                        continue
                
                await context.bot.send_message(
                    chat_id=group_id,
                    text=f"ðŸš¨ User {update.effective_user.full_name} was banned for inappropriate content."
                )
                break
            except Exception as e:
                logging.error(f"Ban failed: {e}")

# New member joins
async def new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.new_chat_members:
        await update.message.reply_text(context.bot_data.rules_text)

# Main
if _name_ == '_main_':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Initialize bot_data
    app.add_handler(MessageHandler(filters.ALL, init_bot_data), group=-1)

    # Command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setrules", set_rules))
    app.add_handler(CommandHandler("addbanword", add_ban_word))
    app.add_handler(CommandHandler("listbanwords", list_ban_words))
    app.add_handler(CommandHandler("help", help_command))
    
    # Message handlers
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_message))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member))

    app.run_polling()